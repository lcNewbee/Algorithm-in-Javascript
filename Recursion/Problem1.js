// 假如这里有 n 个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走这 n 个台阶有多少种走法？如果有 7 个台阶，你可以 2，2，2，1 这样子上去，也可以 1，2，1，1，2 这样子上去，总之走法有很多，那如何用编程求得总共有多少种走法呢？


/**
 * 1. 首要目标是找到递推的公式，那如何分解这个问题呢？也就是怎么样才能分解成更小的子问题呢？
 * 规模更小，那就是转化成n-1、n-2之类的问题，从上台阶的开始阶段着手，第一步，要么是1，要么是2，分着两种情况
 * 如果第一步是1，则剩下的就是求f(n-1)
 * 若第一步是2，则剩下的就是求f(n-2)
 * 两种情况是无重复，无遗漏的，所以f(n) = f(n-1) + f(n-2)
 * 递推公式找到
 * 
 * 2. 接着，要找到退出递归的条件
 * f(1) = 1 ; f(2) = 2 ; 后面的都可以通过递推求解了
 */



 function strategy(n) {
   if (n === 1) return 1
   if (n === 2) return 2
   return strategy(n-1) + strategy(n-2)
 }


 // 几乎所有的递归代码都能改写成非递归的方式
 function nonRecursiongStrategy(n) {
   let ret = 0
   let pre = 2
   let prepre = 1
   for (let i = 3; i <= n; i++) {
     ret = pre + prepre
     prepre = pre
     pre = ret
   }
   return ret
 }